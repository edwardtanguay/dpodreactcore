/* eslint-disable react-hooks/exhaustive-deps */
// @ts-ignore
import { useState, useEffect, useRef } from 'react';
import '../styles/page_howtos.scss';
import { Helmet } from 'react-helmet';
import _initialItems from '../models/model_howtos';
import {
	IHowto,
	IItemPageProps
} from '../models/interfaces';
import * as qstr from '../../system/qtools/qstr';
import * as qsys from '../../system/qtools/qsys';
import * as qdat from '../../system/qtools/qdat';

interface IItemPageState {
	searchText: string;
	idCode: string;
	id: number;
	title: string;
}

function PageHowtos(props: IItemPageProps) {
	const { getUrlId, getUrlSearchText, getUrlIdCode} = props;

	const [items, setItems] = useState<IHowto[]>([]);
	const [itemPageState, setItemPageState] = useState<IItemPageState>({id:0, searchText: '', idCode: '', title: ''});

	const refSearchText = useRef<HTMLInputElement>(null);

	const setInitialPageState = () => {
		setItemPageState({})
	};

	const filterItemsBasedOnPageState = () => {
		setItems(_initialItems);
	};

	useEffect(() => {
		setInitialPageState();
		filterItemsBasedOnPageState();
	}, []);

	useEffect(() => {
		filterItemsBasedOnPageState();
	}, [itemPageState]);

	return (
		<>
			<Helmet>
				<title>Edward's how-to instructions and code examples</title>
				<meta
					name="description"
					content="How to get things done in JavaScript, React, Node, MongoDB, CSS, TypeScript, SQLite, Vue.js, etc."
				/>
			</Helmet>

			<div className="page page_howtos">
				{/* ========== TITLE ========== */}
				{items.length > 1 && searchText === '' && (
					<h2 className="title">{items.length} Howtos</h2>
				)}
				{items.length === 1 && searchText === '' && (
					<h2 className="title oneOfMany">
						1 of {_initialItems.length}{' '}
						<span
							className="itemTypeTitle"
							onClick={() => showAllItems()}
						>
							Howtos
						</span>
					</h2>
				)}
				{items.length === 0 && searchText !== '' && (
					<h2 className="title oneOfMany">
						0 of {_initialItems.length}{' '}
						<span
							className="itemTypeTitle"
							onClick={() => showAllItems()}
						>
							Howtos
						</span>
					</h2>
				)}
				{items.length > 1 && searchText !== '' && (
					<h2 className="title oneOfMany">
						{items.length} of {_initialItems.length}{' '}
						<span
							className="itemTypeTitle"
							onClick={() => showAllItems()}
						>
							Howtos
						</span>
					</h2>
				)}
				{items.length === 1 && searchText !== '' && (
					<h2 className="title oneOfMany">
						1 of {_initialItems.length}{' '}
						<span
							className="itemTypeTitle"
							onClick={() => showAllItems()}
						>
							Howtos
						</span>
					</h2>
				)}

				{/* ========== SEARCH ========== */}
				<div className="searchArea">
					<div className="searchRow">
						<input
							id="mainSearch"
							ref={refSearchText}
							placeholder="search howtos"
							type="text"
							value={searchText}
							className="form-control input-sm searchBox"
							onFocus={displaySearchResults}
							onChange={displaySearchResults}
						/>
					</div>
				</div>

				{/* ========== MULTIPLE RECORDS ========== */}
				{items.length > 1 && (
					<section className="howtos">
						{items.map((howto: any, i: number) => {
							return (
								<div key={i} className="overviewItem">
									<div className="header">
										<span className="createDate">
											{qdat.smartDateWithYear(
												howto.systemWhenCreated
											)}
										</span>{' '}
										<span className="category">
											{howto.categoryTitle}
										</span>
									</div>
									<div
										key={i}
										className="itemLinkTitle"
										onClick={() =>
											setCurrentItemsById(howto.id)
										}
									>
										{howto.title}
									</div>
								</div>
							);
						})}
					</section>
				)}

				{/* ========== ONE RECORD ========== */}
				{items.length === 1 && (
					<div className="item">
						<div className="header">
							<div>
								<span className="createDate">
									{qdat.smartDateWithYear(
										getCurrentItem().systemWhenCreated
									)}
								</span>{' '}
								<span className="category">
									{getCurrentItem().categoryTitle}
								</span>
							</div>
							<div className="headerRow">
								<div className="title">
									{getCurrentItem().title}
								</div>
							</div>
						</div>
						<div className="body">
							<div
								className="codeArea"
								dangerouslySetInnerHTML={{
									__html: convertBodyToBodyParsed(
										getCurrentItem()
									),
								}}
							/>
						</div>
						{getCurrentItem().jsfiddleUrl && (
							<div className="jsfiddleWrapper">
								<div className="title">jsfiddle:</div>
								<iframe
									title="JSFiddle"
									src={getCurrentItem().jsfiddleUrl}
									className="jsfiddle"
									width="100%"
									height="300"
								/>
							</div>
						)}
					</div>
				)}
			</div>
		</>
	);
}

export default PageHowtos;
